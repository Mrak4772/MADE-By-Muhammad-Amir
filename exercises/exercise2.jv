// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file sipnk.
pipeline TreePipeline {
// 2. We describe the structure of the pipeline,
    // usually at the top of the pipeline.
    // by connecting blocks via pipes. 

    // 3. Syntax of a pipe
    // connecting the block AiportExtractor
    // with the block TreeTextFileInterpreter
TreeExtractor -> TreeTextFileInterpreter;
// 4. The output of the preceding block is hereby used 
    // as input for the succeeding block.

    // 5. Pipes can be further chained, 
    // leading to an overview of the pipeline.
        TreeTextFileInterpreter
        -> TreeCSVInterpreter 
        -> TreeTableInterpreter
        -> TreeLoader;

        // 6. Below the pipes, we usually define the blocks 
    // that are connected by the pipes.

    // 7. Blocks instantiate a blocktype by using the oftype keyword.
    // The blocktype defines the available properties that the block
    // can use to specify the intended behavior of the block 
    block TreeExtractor oftype HttpExtractor {
        
        // 8. Properties are assigned to concrete values.
        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }
     // 9. The HttpExtractor requires no input and produces a binary file as output.
    // This file has to be interpreted, e.g., as text file.

    block TreeTextFileInterpreter oftype TextFileInterpreter { }

     // 10. Next, we interpret the text file as sheet.
    // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.

    block TreeCSVInterpreter oftype CSVInterpreter {
        delimiter: ';';
    }
    // 11. We can write into cells of a sheet using the CellWriter blocktype.
    // 12. As a next step, we interpret the sheet as a table by adding structure.
    // We define a valuetype per column that specifies the data type of the column.
    // Rows that include values that are not valid according to the their valuetypes are dropped automatically.
    block TreeTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype text,
            "baumart_deutsch" oftype text,
            "stadtteil" oftype text,
            "pflanzjahr" oftype integer,
            "anzahl" oftype integer,
            "standort" oftype text,
        ];
    }
	

    // 13. As a last step, we load the table into a sink,
    // here into a sqlite file.
    // The structural information of the table is used
    // to generate the correct table.
    block TreeLoader oftype SQLiteLoader {
        table: "trees";
        file: "./trees.sqlite";
    }
}
