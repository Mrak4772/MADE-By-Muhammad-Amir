pipeline WeatherDataPipeline {
    DataFetcher
    -> ArchiveHandler
    -> CSVFileSelector
    -> TextProcessor
    -> CSVParser
    -> UnnecessaryColumnsRemover
    -> HeadersRenamer
    -> DataFrameInterpreter
    -> TempToFahrenheitConverter
    -> BatteryTempToFahrenheitConverter
    -> DataStorer;

    block DataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ArchiveHandler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CSVFileSelector oftype FilePicker {
        path: "/data.csv";
    }

    block TextProcessor oftype TextFileInterpreter {}

    block CSVParser oftype CSVInterpreter {
        delimiter: ";";
    }

    block UnnecessaryColumnsRemover oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    block HeadersRenamer oftype CellWriter {
        at: range A1:F1;
        write: ['id', 'producer', 'model', 'month', 'temp_c', 'battery_temp_c'];
    }

    block DataFrameInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "month" oftype Month,
            "temp_c" oftype decimal,
            "battery_temp_c" oftype decimal
        ];
    }

    valuetype PositiveInteger oftype integer {
        constraints: [ PositiveIntegerConstraint ];
    }

    constraint PositiveIntegerConstraint on integer:
        value > 0;

    valuetype Month oftype integer {
        constraints: [ MonthConstraint ];
    }

    constraint MonthConstraint on integer:
        value >= 1 and value <= 12;

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block TempToFahrenheitConverter oftype TableTransformer {
        inputColumns: ['temp_c'];
        outputColumn: 'temp_fahrenheit';
        use: CelsiusToFahrenheit;
    }

    block BatteryTempToFahrenheitConverter oftype TableTransformer {
        inputColumns: ['battery_temp_c'];
        outputColumn: 'battery_temp_fahrenheit';
        use: CelsiusToFahrenheit;
    }

    block DataStorer oftype SQLiteLoader {
        table: "temperature_readings";
        file: "./temperatures.sqlite";
        dropTable: true;
    }
}
