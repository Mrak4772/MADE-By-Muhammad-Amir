pipeline TemperaturesPipeline {
    DataFetcher
        -> ZipFileInterpreter
        -> CSVFileSelector
        -> TextFileInterpreter
        -> CSVInterpreter
        -> AktivCutoffSelector
        -> UnnecessaryColumnDeleter
       -> HeadersRenamer
       -> DataFrameInterpreter
        -> FahrenheitTransformer
        -> BatterytempTransformer
        -> DataStorer;

    block DataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipFileInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CSVFileSelector oftype FilePicker {
        path: "/data.csv";
    }

    block TextFileInterpreter oftype TextFileInterpreter {}

    block CSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block AktivCutoffSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    block UnnecessaryColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    block HeadersRenamer oftype CellWriter {
        at: range A1:F1;
        write: ['id', 'producer', 'model', 'month', 'temperature', 'battery_temperature'];
    }
    block DataFrameInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInt,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype Month,
            "temperature" oftype Celsius,
            "battery_temperature" oftype Celsius
        ];
    }

    valuetype PositiveInt oftype integer {
        constraints: [ PositiveIntConstraint ];
    }

    constraint PositiveIntConstraint on integer:
        value >= 0;

    valuetype Month oftype integer {
        constraints: [ MonthConstraint ];
    }

    constraint MonthConstraint on integer:
        value >= 0 and value <= 12;

    valuetype Celsius oftype decimal {
        constraints: [ CelsiusConstraint ];
    }

    constraint CelsiusConstraint on decimal:
         value >= -273.15; // the theoretical minimum of degree celsius

    block FahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block BatterytempTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temp_fahrenheit';
        use: CelsiusToFahrenheit;
    }

    block DataStorer oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
        dropTable: true;
    }
}
