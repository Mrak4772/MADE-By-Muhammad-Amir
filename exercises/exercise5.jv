// Define a pipeline named GTFSPipeline to process GTFS data
pipeline GTFSPipeline {
    // Sequence of steps in the pipeline
    GTFSDataExtrct
        -> ZipCompiler
        -> StopZipPicker
        -> GTFSTextFileInterpreter
        -> GTFSCSVParser
        -> GTFSTable
        -> SQLiteLoader;     

    // Extracts GTFS data from a given URL
    block GTFSDataExtrct oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // Interprets the extracted data as a ZIP archive
    block ZipCompiler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Selects the stops.txt file from the ZIP archive
    block StopZipPicker oftype FilePicker {
        path: "/stops.txt";
    }

    // Interprets the stops.txt file as a UTF-8 encoded text file
    block GTFSTextFileInterpreter oftype TextFileInterpreter { 
        encoding: "utf8";  
    }

    // Parses the text file as a CSV file with specified delimiters
    block GTFSCSVParser oftype CSVInterpreter {
        delimiter: ',';
        enclosing: '"';
    }

    // Constraint to ensure the zone_id is exactly 1645
    constraint ZoneConstraint oftype RangeConstraint {
        lowerBound: 1645;
        lowerBoundInclusive: true;
        upperBound: 1645;
        upperBoundInclusive: true;
    }

    // Defines the zone_id value type with the above constraint
    valuetype Zone oftype integer {
        constraints: [ZoneConstraint];
    }

    // Constraint to ensure latitude and longitude values are within valid ranges
    constraint CoordinateConstraint oftype RangeConstraint {
        lowerBound: -90;
        lowerBoundInclusive: true;
        upperBound: 90;
        upperBoundInclusive: true;
    }

    // Defines the geographic coordinate value type with the above constraint
    valuetype GeographicCoordinate oftype decimal {
        constraints: [CoordinateConstraint];
    }

    // Interprets the CSV data as a table with specified columns and types
    block GTFSTable oftype TableInterpreter {
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeographicCoordinate,
            "stop_lon" oftype GeographicCoordinate,
            "zone_id" oftype Zone
        ];
    }

    // Loads the processed data into an SQLite database
    block SQLiteLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}